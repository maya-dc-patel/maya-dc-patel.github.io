{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, TemplateRef, Directive, Inject, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ActiveDescendantKeyManager, removeAriaReferencedId, addAriaReferencedId } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, group, animate } from '@angular/animations';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { hasModifierKey, ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { startWith, switchMap, take, filter, map, tap, delay } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/bidi'; // Animation values come from\n// https://github.com/material-components/material-components-web/blob/master/packages/mdc-menu-surface/_mixins.scss\n// TODO(mmalerba): Ideally find a way to import the values from MDC's code.\n\nconst _c0 = [\"panel\"];\n\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 0, 1);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList)(\"@panelAnimation\", ctx_r0.isOpen ? \"visible\" : \"hidden\");\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n  }\n}\n\nconst _c1 = [\"*\"];\nconst panelAnimation = trigger('panelAnimation', [state('void, hidden', style({\n  opacity: 0,\n  transform: 'scaleY(0.8)'\n})), transition(':enter, hidden => visible', [group([animate('0.03s linear', style({\n  opacity: 1\n})), animate('0.12s cubic-bezier(0, 0, 0.2, 1)', style({\n  transform: 'scaleY(1)'\n}))])]), transition(':leave, visible => hidden', [animate('0.075s linear', style({\n  opacity: 0\n}))])]);\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\n\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\n\nclass MatAutocompleteSelectedEvent {\n  constructor(\n  /** Reference to the autocomplete panel that emitted the event. */\n  source,\n  /** Option that was selected. */\n  option) {\n    this.source = source;\n    this.option = option;\n  }\n\n} // Boilerplate for applying mixins to MatAutocomplete.\n\n/** @docs-private */\n\n\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {});\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\n\n\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false,\n    autoSelectActiveOption: false,\n    hideSingleSelectionIndicator: false\n  };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\n\n\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n  /** Whether the autocomplete panel is open. */\n  get isOpen() {\n    return this._isOpen && this.showPanel;\n  }\n  /** @docs-private Sets the theme color of the panel. */\n\n\n  _setColor(value) {\n    this._color = value;\n\n    this._setThemeClasses(this._classList);\n  }\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n\n\n  get autoActiveFirstOption() {\n    return this._autoActiveFirstOption;\n  }\n\n  set autoActiveFirstOption(value) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  /** Whether the active option should be selected as the user is navigating. */\n\n\n  get autoSelectActiveOption() {\n    return this._autoSelectActiveOption;\n  }\n\n  set autoSelectActiveOption(value) {\n    this._autoSelectActiveOption = coerceBooleanProperty(value);\n  }\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n\n\n  set classList(value) {\n    if (value && value.length) {\n      this._classList = coerceStringArray(value).reduce((classList, className) => {\n        classList[className] = true;\n        return classList;\n      }, {});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n\n    this._setThemeClasses(this._classList);\n\n    this._elementRef.nativeElement.className = '';\n  }\n\n  constructor(_changeDetectorRef, _elementRef, _defaults, platform) {\n    super();\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._defaults = _defaults;\n    this._activeOptionChanges = Subscription.EMPTY;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n\n    this.showPanel = false;\n    this._isOpen = false;\n    /** Function that maps an option's control value to its display value in the trigger. */\n\n    this.displayWith = null;\n    /** Event that is emitted whenever an option from the list is selected. */\n\n    this.optionSelected = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is opened. */\n\n    this.opened = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is closed. */\n\n    this.closed = new EventEmitter();\n    /** Emits whenever an option is activated. */\n\n    this.optionActivated = new EventEmitter();\n    this._classList = {};\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n\n    this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`; // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n    // Safari using VoiceOver. We should occasionally check back to see whether the bug\n    // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n    // option altogether.\n\n    this.inertGroups = platform?.SAFARI || false;\n    this._autoActiveFirstOption = !!_defaults.autoActiveFirstOption;\n    this._autoSelectActiveOption = !!_defaults.autoSelectActiveOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap().skipPredicate(this._skipPredicate);\n    this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n      if (this.isOpen) {\n        this.optionActivated.emit({\n          source: this,\n          option: this.options.toArray()[index] || null\n        });\n      }\n    }); // Set the initial visibility state.\n\n    this._setVisibility();\n  }\n\n  ngOnDestroy() {\n    this._keyManager?.destroy();\n\n    this._activeOptionChanges.unsubscribe();\n  }\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n\n\n  _setScrollTop(scrollTop) {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n  /** Returns the panel's scrollTop. */\n\n\n  _getScrollTop() {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n  /** Panel should hide itself when the option list is empty. */\n\n\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n\n    this._setVisibilityClasses(this._classList);\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Emits the `select` event. */\n\n\n  _emitSelectEvent(option) {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n  /** Gets the aria-labelledby for the autocomplete panel. */\n\n\n  _getPanelAriaLabelledby(labelId) {\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelExpression = labelId ? labelId + ' ' : '';\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n\n\n  _setVisibilityClasses(classList) {\n    classList[this._visibleClass] = this.showPanel;\n    classList[this._hiddenClass] = !this.showPanel;\n  }\n  /** Sets the theming classes on a classlist based on the theme of the panel. */\n\n\n  _setThemeClasses(classList) {\n    classList['mat-primary'] = this._color === 'primary';\n    classList['mat-warn'] = this._color === 'warn';\n    classList['mat-accent'] = this._color === 'accent';\n  }\n\n  _skipPredicate(option) {\n    return option.disabled;\n  }\n\n  static #_ = this.ɵfac = function _MatAutocompleteBase_Factory(t) {\n    return new (t || _MatAutocompleteBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(i1.Platform));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: _MatAutocompleteBase,\n    viewQuery: function _MatAutocompleteBase_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TemplateRef, 7);\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      }\n    },\n    inputs: {\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      displayWith: \"displayWith\",\n      autoActiveFirstOption: \"autoActiveFirstOption\",\n      autoSelectActiveOption: \"autoSelectActiveOption\",\n      panelWidth: \"panelWidth\",\n      classList: [\"class\", \"classList\"]\n    },\n    outputs: {\n      optionSelected: \"optionSelected\",\n      opened: \"opened\",\n      closed: \"closed\",\n      optionActivated: \"optionActivated\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: i1.Platform\n    }];\n  }, {\n    template: [{\n      type: ViewChild,\n      args: [TemplateRef, {\n        static: true\n      }]\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    displayWith: [{\n      type: Input\n    }],\n    autoActiveFirstOption: [{\n      type: Input\n    }],\n    autoSelectActiveOption: [{\n      type: Input\n    }],\n    panelWidth: [{\n      type: Input\n    }],\n    optionSelected: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n    optionActivated: [{\n      type: Output\n    }],\n    classList: [{\n      type: Input,\n      args: ['class']\n    }]\n  });\n})();\n\nclass MatAutocomplete extends _MatAutocompleteBase {\n  constructor() {\n    super(...arguments);\n    this._visibleClass = 'mat-mdc-autocomplete-visible';\n    this._hiddenClass = 'mat-mdc-autocomplete-hidden';\n    this._hideSingleSelectionIndicator = this._defaults.hideSingleSelectionIndicator ?? false;\n  }\n  /** Whether checkmark indicator for single-selection options is hidden. */\n\n\n  get hideSingleSelectionIndicator() {\n    return this._hideSingleSelectionIndicator;\n  }\n\n  set hideSingleSelectionIndicator(value) {\n    this._hideSingleSelectionIndicator = coerceBooleanProperty(value);\n\n    this._syncParentProperties();\n  }\n  /** Syncs the parent state with the individual options. */\n\n\n  _syncParentProperties() {\n    if (this.options) {\n      for (const option of this.options) {\n        option._changeDetectorRef.markForCheck();\n      }\n    }\n  } // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n  // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n  // recommendation.\n  //\n  // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n  // makes a few exceptions for compound widgets.\n  //\n  // From [Developing a Keyboard Interface](\n  // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n  //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n  //   Listbox...\"\n  //\n  // The user can focus disabled options using the keyboard, but the user cannot click disabled\n  // options.\n\n\n  _skipPredicate(_option) {\n    return false;\n  }\n\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatAutocomplete_BaseFactory;\n    return function MatAutocomplete_Factory(t) {\n      return (ɵMatAutocomplete_BaseFactory || (ɵMatAutocomplete_BaseFactory = i0.ɵɵgetInheritedFactory(MatAutocomplete)))(t || MatAutocomplete);\n    };\n  }();\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatAutocomplete,\n    selectors: [[\"mat-autocomplete\"]],\n    contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n        i0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n      }\n    },\n    hostAttrs: [\"ngSkipHydration\", \"\", 1, \"mat-mdc-autocomplete\"],\n    inputs: {\n      disableRipple: \"disableRipple\",\n      hideSingleSelectionIndicator: \"hideSingleSelectionIndicator\"\n    },\n    exportAs: [\"matAutocomplete\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAT_OPTION_PARENT_COMPONENT,\n      useExisting: MatAutocomplete\n    }]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    consts: [[\"role\", \"listbox\", 1, \"mat-mdc-autocomplete-panel\", \"mdc-menu-surface\", \"mdc-menu-surface--open\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n    template: function MatAutocomplete_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 5, \"ng-template\");\n      }\n    },\n    dependencies: [i2.NgClass],\n    styles: [\"div.mat-mdc-autocomplete-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden}mat-autocomplete{display:none}\"],\n    encapsulation: 2,\n    data: {\n      animation: [panelAnimation]\n    },\n    changeDetection: 0\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocomplete, [{\n    type: Component,\n    args: [{\n      selector: 'mat-autocomplete',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      exportAs: 'matAutocomplete',\n      inputs: ['disableRipple'],\n      host: {\n        'class': 'mat-mdc-autocomplete',\n        'ngSkipHydration': ''\n      },\n      providers: [{\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatAutocomplete\n      }],\n      animations: [panelAnimation],\n      template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n      styles: [\"div.mat-mdc-autocomplete-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden}mat-autocomplete{display:none}\"]\n    }]\n  }], null, {\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    hideSingleSelectionIndicator: [{\n      type: Input\n    }]\n  });\n})();\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\n\n\nclass _MatAutocompleteOriginBase {\n  constructor(\n  /** Reference to the element on which the directive is applied. */\n  elementRef) {\n    this.elementRef = elementRef;\n  }\n\n  static #_ = this.ɵfac = function _MatAutocompleteOriginBase_Factory(t) {\n    return new (t || _MatAutocompleteOriginBase)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: _MatAutocompleteOriginBase\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n\n\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatAutocompleteOrigin_BaseFactory;\n    return function MatAutocompleteOrigin_Factory(t) {\n      return (ɵMatAutocompleteOrigin_BaseFactory || (ɵMatAutocompleteOrigin_BaseFactory = i0.ɵɵgetInheritedFactory(MatAutocompleteOrigin)))(t || MatAutocompleteOrigin);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatAutocompleteOrigin,\n    selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n    exportAs: [\"matAutocompleteOrigin\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[matAutocompleteOrigin]',\n      exportAs: 'matAutocompleteOrigin'\n    }]\n  }], null, null);\n})();\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\n\n\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\n\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\n\n\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\n\n\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\n\nclass _MatAutocompleteTriggerBase {\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  get autocompleteDisabled() {\n    return this._autocompleteDisabled;\n  }\n\n  set autocompleteDisabled(value) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n    this._element = _element;\n    this._overlay = _overlay;\n    this._viewContainerRef = _viewContainerRef;\n    this._zone = _zone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._formField = _formField;\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    this._defaults = _defaults;\n    this._componentDestroyed = false;\n    this._autocompleteDisabled = false;\n    /** Whether or not the label state is being overridden. */\n\n    this._manuallyFloatingLabel = false;\n    /** Subscription to viewport size changes. */\n\n    this._viewportSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n\n    this._canOpenOnNextFocus = true;\n    /** Stream of keyboard events that can close the panel. */\n\n    this._closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n\n    this._windowBlurHandler = () => {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      this._canOpenOnNextFocus = this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n    };\n    /** `View -> model callback called when value changes` */\n\n\n    this._onChange = () => {};\n    /** `View -> model callback called when autocomplete has been touched` */\n\n\n    this._onTouched = () => {};\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     */\n\n\n    this.position = 'auto';\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n\n    this.autocompleteAttribute = 'off';\n    this._overlayAttached = false;\n    /** Stream of changes to the selection state of the autocomplete options. */\n\n    this.optionSelections = defer(() => {\n      const options = this.autocomplete ? this.autocomplete.options : null;\n\n      if (options) {\n        return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n      } // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n\n\n      return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n    });\n    /**\n     * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n     * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n     * panel. Track the modal we have changed so we can undo the changes on destroy.\n     */\n\n    this._trackedModal = null;\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterViewInit() {\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n\n    this._componentDestroyed = true;\n\n    this._destroyPanel();\n\n    this._closeKeyEventStream.complete();\n\n    this._clearFromModal();\n  }\n  /** Whether or not the autocomplete panel is open. */\n\n\n  get panelOpen() {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  /** Opens the autocomplete suggestion panel. */\n\n\n  openPanel() {\n    this._attachOverlay();\n\n    this._floatLabel();\n  }\n  /** Closes the autocomplete suggestion panel. */\n\n\n  closePanel() {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      // The `NgZone.onStable` always emits outside of the Angular zone,\n      // so all the subscriptions from `_subscribeToClosingActions()` are also outside of the Angular zone.\n      // We should manually run in Angular zone to update UI after panel closing.\n      this._zone.run(() => {\n        this.autocomplete.closed.emit();\n      });\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n    this._pendingAutoselectedOption = null;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n\n      this._closingActionsSubscription.unsubscribe();\n    } // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n\n\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n\n\n  updatePosition() {\n    if (this._overlayAttached) {\n      this._overlayRef.updatePosition();\n    }\n  }\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n\n\n  get panelClosingActions() {\n    return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) : of()).pipe( // Normalize the output so we return a consistent type.\n    map(event => event instanceof MatOptionSelectionChange ? event : null));\n  }\n  /** The currently active option, coerced to MatOption type. */\n\n\n  get activeOption() {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n  /** Stream of clicks outside of the autocomplete panel. */\n\n\n  _getOutsideClickStream() {\n    return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n      // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n      // fall back to check the first element in the path of the click event.\n      const clickTarget = _getEventTarget(event);\n\n      const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n      const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n      return this._overlayAttached && clickTarget !== this._element.nativeElement && // Normally focus moves inside `mousedown` so this condition will almost always be\n      // true. Its main purpose is to handle the case where the input is focused from an\n      // outside click which propagates up to the `body` listener within the same sequence\n      // and causes the panel to close immediately (see #3106).\n      this._document.activeElement !== this._element.nativeElement && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget);\n    }));\n  } // Implemented as part of ControlValueAccessor.\n\n\n  writeValue(value) {\n    Promise.resolve(null).then(() => this._assignOptionValue(value));\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  setDisabledState(isDisabled) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event) {\n    const keyCode = event.keyCode;\n    const hasModifier = hasModifierKey(event); // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n\n    if (keyCode === ESCAPE && !hasModifier) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n      this.activeOption._selectViaInteraction();\n\n      this._resetActiveItem();\n\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (keyCode === TAB || isArrowKey && !hasModifier && this.panelOpen) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n\n        if (this.autocomplete.autoSelectActiveOption && this.activeOption) {\n          if (!this._pendingAutoselectedOption) {\n            this._valueBeforeAutoSelection = this._element.nativeElement.value;\n          }\n\n          this._pendingAutoselectedOption = this.activeOption;\n\n          this._assignOptionValue(this.activeOption.value);\n        }\n      }\n    }\n  }\n\n  _handleInput(event) {\n    let target = event.target;\n    let value = target.value; // Based on `NumberValueAccessor` from forms.\n\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    } // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n\n\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._pendingAutoselectedOption = null;\n\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus() {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n\n      this._attachOverlay();\n\n      this._floatLabel(true);\n    }\n  }\n\n  _handleClick() {\n    if (this._canOpen() && !this.panelOpen) {\n      this.openPanel();\n    }\n  }\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n\n\n  _floatLabel(shouldAnimate = false) {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n  /** If the label has been manually elevated, return it to its normal state. */\n\n\n  _resetLabel() {\n    if (this._manuallyFloatingLabel) {\n      if (this._formField) {\n        this._formField.floatLabel = 'auto';\n      }\n\n      this._manuallyFloatingLabel = false;\n    }\n  }\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n\n\n  _subscribeToClosingActions() {\n    const firstStable = this._zone.onStable.pipe(take(1));\n\n    const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), // Defer emitting to the stream until the next tick, because changing\n    // bindings in here will cause \"changed after checked\" errors.\n    delay(0)); // When the zone is stable initially, and when the option list changes...\n\n    return merge(firstStable, optionChanges).pipe( // create a new stream of panelClosingActions, replacing any previous streams\n    // that were created, and flatten it so our stream only emits closing events...\n    switchMap(() => {\n      // The `NgZone.onStable` always emits outside of the Angular zone, thus we have to re-enter\n      // the Angular zone. This will lead to change detection being called outside of the Angular\n      // zone and the `autocomplete.opened` will also emit outside of the Angular.\n      this._zone.run(() => {\n        const wasOpen = this.panelOpen;\n\n        this._resetActiveItem();\n\n        this.autocomplete._setVisibility();\n\n        this._changeDetectorRef.detectChanges();\n\n        if (this.panelOpen) {\n          this._overlayRef.updatePosition();\n        }\n\n        if (wasOpen !== this.panelOpen) {\n          // If the `panelOpen` state changed, we need to make sure to emit the `opened` or\n          // `closed` event, because we may not have emitted it. This can happen\n          // - if the users opens the panel and there are no options, but the\n          //   options come in slightly later or as a result of the value changing,\n          // - if the panel is closed after the user entered a string that did not match any\n          //   of the available options,\n          // - if a valid string is entered after an invalid one.\n          if (this.panelOpen) {\n            this.autocomplete.opened.emit();\n          } else {\n            this.autocomplete.closed.emit();\n          }\n        }\n      });\n\n      return this.panelClosingActions;\n    }), // when the first closing event occurs...\n    take(1)) // set the value, close the panel, and complete.\n    .subscribe(event => this._setValueAndClose(event));\n  }\n  /** Destroys the autocomplete suggestion panel. */\n\n\n  _destroyPanel() {\n    if (this._overlayRef) {\n      this.closePanel();\n\n      this._overlayRef.dispose();\n\n      this._overlayRef = null;\n    }\n  }\n\n  _assignOptionValue(value) {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value; // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n\n    this._updateNativeInputValue(toDisplay != null ? toDisplay : '');\n  }\n\n  _updateNativeInputValue(value) {\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = value;\n    } else {\n      this._element.nativeElement.value = value;\n    }\n\n    this._previousValue = value;\n  }\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n\n\n  _setValueAndClose(event) {\n    const toSelect = event ? event.source : this._pendingAutoselectedOption;\n\n    if (toSelect) {\n      this._clearPreviousSelectedOption(toSelect);\n\n      this._assignOptionValue(toSelect.value);\n\n      this._onChange(toSelect.value);\n\n      this.autocomplete._emitSelectEvent(toSelect);\n\n      this._element.nativeElement.focus();\n    }\n\n    this.closePanel();\n  }\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n\n\n  _clearPreviousSelectedOption(skip) {\n    this.autocomplete.options.forEach(option => {\n      if (option !== skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  _attachOverlay() {\n    if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n        id: this._formField?.getLabelId()\n      });\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      this._handleOverlayEvents(overlayRef);\n\n      this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n        if (this.panelOpen && overlayRef) {\n          overlayRef.updateSize({\n            width: this._getPanelWidth()\n          });\n        }\n      });\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n\n      overlayRef.updateSize({\n        width: this._getPanelWidth()\n      });\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    this.autocomplete._setColor(this._formField?.color);\n\n    this._applyModalPanelOwnership(); // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n\n\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  _getOverlayConfig() {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir ?? undefined,\n      panelClass: this._defaults?.overlayPanelClass\n    });\n  }\n\n  _getOverlayPosition() {\n    const strategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n\n    this._setStrategyPositions(strategy);\n\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n  /** Sets the positions on a position strategy based on the directive's input state. */\n\n\n  _setStrategyPositions(positionStrategy) {\n    // Note that we provide horizontal fallback positions, even though by default the dropdown\n    // width matches the input, because consumers can override the width. See #18854.\n    const belowPositions = [{\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'end',\n      originY: 'bottom',\n      overlayX: 'end',\n      overlayY: 'top'\n    }]; // The overlay edge connected to the trigger should have squared corners, while\n    // the opposite end has rounded corners. We apply a CSS class to swap the\n    // border-radius based on the overlay position.\n\n    const panelClass = this._aboveClass;\n    const abovePositions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      panelClass\n    }, {\n      originX: 'end',\n      originY: 'top',\n      overlayX: 'end',\n      overlayY: 'bottom',\n      panelClass\n    }];\n    let positions;\n\n    if (this.position === 'above') {\n      positions = abovePositions;\n    } else if (this.position === 'below') {\n      positions = belowPositions;\n    } else {\n      positions = [...belowPositions, ...abovePositions];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  _getConnectedElement() {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  _getPanelWidth() {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n  /** Returns the width of the input element, so the panel width can match it. */\n\n\n  _getHostWidth() {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n  /**\n   * Reset the active item to -1. This is so that pressing arrow keys will activate the correct\n   * option.\n   *\n   * If the consumer opted-in to automatically activatating the first option, activate the first\n   * *enabled* option.\n   */\n\n\n  _resetActiveItem() {\n    const autocomplete = this.autocomplete;\n\n    if (autocomplete.autoActiveFirstOption) {\n      // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n      // because it activates the first option that passes the skip predicate, rather than the\n      // first *enabled* option.\n      let firstEnabledOptionIndex = -1;\n\n      for (let index = 0; index < autocomplete.options.length; index++) {\n        const option = autocomplete.options.get(index);\n\n        if (!option.disabled) {\n          firstEnabledOptionIndex = index;\n          break;\n        }\n      }\n\n      autocomplete._keyManager.setActiveItem(firstEnabledOptionIndex);\n    } else {\n      autocomplete._keyManager.setActiveItem(-1);\n    }\n  }\n  /** Determines whether the panel can be opened. */\n\n\n  _canOpen() {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n  _getWindow() {\n    return this._document?.defaultView || window;\n  }\n  /** Scrolls to a particular option in the list. */\n\n\n  _scrollToOption(index) {\n    // Given that we are not actually focusing active options, we must manually adjust scroll\n    // to reveal options below the fold. First, we find the offset of the option from the top\n    // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n    // the panel height + the option height, so the active option will be just visible at the\n    // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n    // will become the offset. If that offset is visible within the panel already, the scrollTop is\n    // not adjusted.\n    const autocomplete = this.autocomplete;\n\n    const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n\n    if (index === 0 && labelCount === 1) {\n      // If we've got one group label before the option and we're at the top option,\n      // scroll the list to the top. This is better UX than scrolling the list to the\n      // top of the option, because it allows the user to read the top group's label.\n      autocomplete._setScrollTop(0);\n    } else if (autocomplete.panel) {\n      const option = autocomplete.options.toArray()[index];\n\n      if (option) {\n        const element = option._getHostElement();\n\n        const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n\n        autocomplete._setScrollTop(newScrollPosition);\n      }\n    }\n  }\n  /** Handles keyboard events coming from the overlay panel. */\n\n\n  _handleOverlayEvents(overlayRef) {\n    // Use the `keydownEvents` in order to take advantage of\n    // the overlay event targeting provided by the CDK overlay.\n    overlayRef.keydownEvents().subscribe(event => {\n      // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n      // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n      if (event.keyCode === ESCAPE && !hasModifierKey(event) || event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey')) {\n        // If the user had typed something in before we autoselected an option, and they decided\n        // to cancel the selection, restore the input value to the one they had typed in.\n        if (this._pendingAutoselectedOption) {\n          this._updateNativeInputValue(this._valueBeforeAutoSelection ?? '');\n\n          this._pendingAutoselectedOption = null;\n        }\n\n        this._closeKeyEventStream.next();\n\n        this._resetActiveItem(); // We need to stop propagation, otherwise the event will eventually\n        // reach the input itself and cause the overlay to be reopened.\n\n\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    }); // Subscribe to the pointer events stream so that it doesn't get picked up by other overlays.\n    // TODO(crisbeto): we should switch `_getOutsideClickStream` eventually to use this stream,\n    // but the behvior isn't exactly the same and it ends up breaking some internal tests.\n\n    overlayRef.outsidePointerEvents().subscribe();\n  }\n  /**\n   * If the autocomplete trigger is inside of an `aria-modal` element, connect\n   * that modal to the options panel with `aria-owns`.\n   *\n   * For some browser + screen reader combinations, when navigation is inside\n   * of an `aria-modal` element, the screen reader treats everything outside\n   * of that modal as hidden or invisible.\n   *\n   * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n   * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n   * from reaching the panel.\n   *\n   * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n   * the options panel. This effectively communicates to assistive technology that the\n   * options panel is part of the same interaction as the modal.\n   *\n   * At time of this writing, this issue is present in VoiceOver.\n   * See https://github.com/angular/components/issues/20694\n   */\n\n\n  _applyModalPanelOwnership() {\n    // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n    // the `LiveAnnouncer` and any other usages.\n    //\n    // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n    // section of the DOM we need to look through. This should cover all the cases we support, but\n    // the selector can be expanded if it turns out to be too narrow.\n    const modal = this._element.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n\n    if (!modal) {\n      // Most commonly, the autocomplete trigger is not inside a modal.\n      return;\n    }\n\n    const panelId = this.autocomplete.id;\n\n    if (this._trackedModal) {\n      removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n    }\n\n    addAriaReferencedId(modal, 'aria-owns', panelId);\n    this._trackedModal = modal;\n  }\n  /** Clears the references to the listbox overlay element from the modal it was added to. */\n\n\n  _clearFromModal() {\n    if (this._trackedModal) {\n      const panelId = this.autocomplete.id;\n      removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n      this._trackedModal = null;\n    }\n  }\n\n  static #_ = this.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) {\n    return new (t || _MatAutocompleteTriggerBase)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1$1.Overlay), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i2$1.Directionality, 8), i0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(i3.ViewportRuler), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: _MatAutocompleteTriggerBase,\n    inputs: {\n      autocomplete: [\"matAutocomplete\", \"autocomplete\"],\n      position: [\"matAutocompletePosition\", \"position\"],\n      connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"],\n      autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"],\n      autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"]\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1$1.Overlay\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i2$1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i4.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }, {\n        type: Host\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i3.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    autocomplete: [{\n      type: Input,\n      args: ['matAutocomplete']\n    }],\n    position: [{\n      type: Input,\n      args: ['matAutocompletePosition']\n    }],\n    connectedTo: [{\n      type: Input,\n      args: ['matAutocompleteConnectedTo']\n    }],\n    autocompleteAttribute: [{\n      type: Input,\n      args: ['autocomplete']\n    }],\n    autocompleteDisabled: [{\n      type: Input,\n      args: ['matAutocompleteDisabled']\n    }]\n  });\n})();\n\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n  constructor() {\n    super(...arguments);\n    this._aboveClass = 'mat-mdc-autocomplete-panel-above';\n  }\n\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatAutocompleteTrigger_BaseFactory;\n    return function MatAutocompleteTrigger_Factory(t) {\n      return (ɵMatAutocompleteTrigger_BaseFactory || (ɵMatAutocompleteTrigger_BaseFactory = i0.ɵɵgetInheritedFactory(MatAutocompleteTrigger)))(t || MatAutocompleteTrigger);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatAutocompleteTrigger,\n    selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n    hostAttrs: [1, \"mat-mdc-autocomplete-trigger\"],\n    hostVars: 7,\n    hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n          return ctx._handleFocus();\n        })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n          return ctx._onTouched();\n        })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n          return ctx._handleInput($event);\n        })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        })(\"click\", function MatAutocompleteTrigger_click_HostBindingHandler() {\n          return ctx._handleClick();\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-controls\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", ctx.autocompleteDisabled ? null : \"listbox\");\n      }\n    },\n    exportAs: [\"matAutocompleteTrigger\"],\n    features: [i0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n    type: Directive,\n    args: [{\n      selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n      host: {\n        'class': 'mat-mdc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n        '[attr.aria-controls]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': '_handleFocus()',\n        '(blur)': '_onTouched()',\n        '(input)': '_handleInput($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(click)': '_handleClick()'\n      },\n      exportAs: 'matAutocompleteTrigger',\n      providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n    }]\n  }], null, null);\n})();\n\nclass MatAutocompleteModule {\n  static #_ = this.ɵfac = function MatAutocompleteModule_Factory(t) {\n    return new (t || MatAutocompleteModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatAutocompleteModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule, CdkScrollableModule, MatOptionModule, MatCommonModule]\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocompleteModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n      exports: [CdkScrollableModule, MatAutocomplete, MatOptionModule, MatCommonModule, MatAutocompleteTrigger, MatAutocompleteOrigin],\n      declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n      providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","TemplateRef","Directive","Inject","ViewChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","forwardRef","Optional","Host","NgModule","mixinDisableRipple","MAT_OPTION_PARENT_COMPONENT","MAT_OPTGROUP","MatOption","MatOptionSelectionChange","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionModule","MatCommonModule","i2","DOCUMENT","CommonModule","i3","CdkScrollableModule","i1$1","Overlay","OverlayConfig","OverlayModule","ActiveDescendantKeyManager","removeAriaReferencedId","addAriaReferencedId","coerceBooleanProperty","coerceStringArray","i1","_getEventTarget","trigger","state","style","transition","group","animate","Subscription","Subject","defer","merge","of","fromEvent","hasModifierKey","ESCAPE","ENTER","UP_ARROW","DOWN_ARROW","TAB","TemplatePortal","NG_VALUE_ACCESSOR","i4","MAT_FORM_FIELD","startWith","switchMap","take","filter","map","tap","delay","i2$1","panelAnimation","opacity","transform","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","autoSelectActiveOption","hideSingleSelectionIndicator","_MatAutocompleteBase","isOpen","_isOpen","showPanel","_setColor","value","_color","_setThemeClasses","_classList","_autoActiveFirstOption","_autoSelectActiveOption","classList","length","reduce","className","_setVisibilityClasses","_elementRef","nativeElement","_changeDetectorRef","_defaults","platform","_activeOptionChanges","EMPTY","displayWith","optionSelected","opened","closed","optionActivated","id","inertGroups","SAFARI","ngAfterContentInit","_keyManager","options","withWrap","skipPredicate","_skipPredicate","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","destroy","unsubscribe","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","_getPanelAriaLabelledby","labelId","ariaLabel","labelExpression","ariaLabelledby","_visibleClass","_hiddenClass","disabled","ɵfac","ChangeDetectorRef","ElementRef","Platform","ɵdir","type","undefined","decorators","args","template","static","panelWidth","MatAutocomplete","arguments","_hideSingleSelectionIndicator","_syncParentProperties","_option","ɵcmp","provide","useExisting","NgClass","selector","encapsulation","None","changeDetection","OnPush","exportAs","inputs","host","providers","animations","styles","optionGroups","descendants","_MatAutocompleteOriginBase","elementRef","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","_MatAutocompleteTriggerBase","autocompleteDisabled","_autocompleteDisabled","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","changes","pipe","onSelectionChange","onStable","_trackedModal","_scrollStrategy","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","_clearFromModal","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","run","_pendingAutoselectedOption","hasAttached","detach","_closingActionsSubscription","detectChanges","panelClosingActions","tabOut","_getOutsideClickStream","detachments","activeOption","activeItem","clickTarget","formField","customOrigin","connectedTo","contains","overlayElement","writeValue","Promise","resolve","then","_assignOptionValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_handleKeydown","keyCode","hasModifier","preventDefault","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_valueBeforeAutoSelection","_handleInput","target","parseFloat","_previousValue","_handleFocus","_handleClick","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","_setValueAndClose","dispose","toDisplay","_updateNativeInputValue","_control","toSelect","_clearPreviousSelectedOption","focus","skip","forEach","selected","deselect","ngDevMode","overlayRef","_portal","getLabelId","create","_getOverlayConfig","_handleOverlayEvents","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","color","_applyModalPanelOwnership","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","firstEnabledOptionIndex","get","setActiveItem","element","readOnly","defaultView","labelCount","_getHostElement","newScrollPosition","offsetTop","offsetHeight","keydownEvents","next","stopPropagation","outsidePointerEvents","modal","closest","panelId","ViewContainerRef","NgZone","Directionality","ViewportRuler","MatFormField","MatAutocompleteModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["/Users/mayapatel/git/personal/CoffeeMaker2/front-end/node_modules/@angular/material/fesm2022/autocomplete.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, TemplateRef, Directive, Inject, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ActiveDescendantKeyManager, removeAriaReferencedId, addAriaReferencedId } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, group, animate } from '@angular/animations';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { hasModifierKey, ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { startWith, switchMap, take, filter, map, tap, delay } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/bidi';\n\n// Animation values come from\n// https://github.com/material-components/material-components-web/blob/master/packages/mdc-menu-surface/_mixins.scss\n// TODO(mmalerba): Ideally find a way to import the values from MDC's code.\nconst panelAnimation = trigger('panelAnimation', [\n    state('void, hidden', style({\n        opacity: 0,\n        transform: 'scaleY(0.8)',\n    })),\n    transition(':enter, hidden => visible', [\n        group([\n            animate('0.03s linear', style({ opacity: 1 })),\n            animate('0.12s cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scaleY(1)' })),\n        ]),\n    ]),\n    transition(':leave, visible => hidden', [animate('0.075s linear', style({ opacity: 0 }))]),\n]);\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {\n});\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        autoActiveFirstOption: false,\n        autoSelectActiveOption: false,\n        hideSingleSelectionIndicator: false,\n    };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    /** Whether the autocomplete panel is open. */\n    get isOpen() {\n        return this._isOpen && this.showPanel;\n    }\n    /** @docs-private Sets the theme color of the panel. */\n    _setColor(value) {\n        this._color = value;\n        this._setThemeClasses(this._classList);\n    }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() {\n        return this._autoActiveFirstOption;\n    }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /** Whether the active option should be selected as the user is navigating. */\n    get autoSelectActiveOption() {\n        return this._autoSelectActiveOption;\n    }\n    set autoSelectActiveOption(value) {\n        this._autoSelectActiveOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._setThemeClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    constructor(_changeDetectorRef, _elementRef, _defaults, platform) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._defaults = _defaults;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = platform?.SAFARI || false;\n        this._autoActiveFirstOption = !!_defaults.autoActiveFirstOption;\n        this._autoSelectActiveOption = !!_defaults.autoSelectActiveOption;\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withWrap()\n            .skipPredicate(this._skipPredicate);\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            if (this.isOpen) {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            }\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n    /** Sets the theming classes on a classlist based on the theme of the panel. */\n    _setThemeClasses(classList) {\n        classList['mat-primary'] = this._color === 'primary';\n        classList['mat-warn'] = this._color === 'warn';\n        classList['mat-accent'] = this._color === 'accent';\n    }\n    _skipPredicate(option) {\n        return option.disabled;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteBase, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatAutocompleteBase, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", autoSelectActiveOption: \"autoSelectActiveOption\", panelWidth: \"panelWidth\", classList: [\"class\", \"classList\"] }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, viewQueries: [{ propertyName: \"template\", first: true, predicate: TemplateRef, descendants: true, static: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }, { type: i1.Platform }]; }, propDecorators: { template: [{\n                type: ViewChild,\n                args: [TemplateRef, { static: true }]\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], displayWith: [{\n                type: Input\n            }], autoActiveFirstOption: [{\n                type: Input\n            }], autoSelectActiveOption: [{\n                type: Input\n            }], panelWidth: [{\n                type: Input\n            }], optionSelected: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], closed: [{\n                type: Output\n            }], optionActivated: [{\n                type: Output\n            }], classList: [{\n                type: Input,\n                args: ['class']\n            }] } });\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-mdc-autocomplete-visible';\n        this._hiddenClass = 'mat-mdc-autocomplete-hidden';\n        this._hideSingleSelectionIndicator = this._defaults.hideSingleSelectionIndicator ?? false;\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = coerceBooleanProperty(value);\n        this._syncParentProperties();\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate(_option) {\n        return false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocomplete, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatAutocomplete, selector: \"mat-autocomplete\", inputs: { disableRipple: \"disableRipple\", hideSingleSelectionIndicator: \"hideSingleSelectionIndicator\" }, host: { attributes: { \"ngSkipHydration\": \"\" }, classAttribute: \"mat-mdc-autocomplete\" }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], queries: [{ propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }], exportAs: [\"matAutocomplete\"], usesInheritance: true, ngImport: i0, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden}mat-autocomplete{display:none}\"], dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [panelAnimation], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocomplete, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-autocomplete', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', inputs: ['disableRipple'], host: {\n                        'class': 'mat-mdc-autocomplete',\n                        'ngSkipHydration': '',\n                    }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], animations: [panelAnimation], template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden}mat-autocomplete{display:none}\"] }]\n        }], propDecorators: { optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], hideSingleSelectionIndicator: [{\n                type: Input\n            }] } });\n\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteOriginBase, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatAutocompleteOriginBase, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteOriginBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteOrigin, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatAutocompleteOrigin, selector: \"[matAutocompleteOrigin]\", exportAs: [\"matAutocompleteOrigin\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matAutocompleteOrigin]',\n                    exportAs: 'matAutocompleteOrigin',\n                }]\n        }] });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true,\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() {\n        return this._autocompleteDisabled;\n    }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of changes to the selection state of the autocomplete options. */\n        this.optionSelections = defer(() => {\n            const options = this.autocomplete ? this.autocomplete.options : null;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        /**\n         * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n         * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n         * panel. Track the modal we have changed so we can undo the changes on destroy.\n         */\n        this._trackedModal = null;\n        this._scrollStrategy = scrollStrategy;\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n        this._clearFromModal();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            // The `NgZone.onStable` always emits outside of the Angular zone,\n            // so all the subscriptions from `_subscribeToClosingActions()` are also outside of the Angular zone.\n            // We should manually run in Angular zone to update UI after panel closing.\n            this._zone.run(() => {\n                this.autocomplete.closed.emit();\n            });\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        this._pendingAutoselectedOption = null;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef\n            ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached))\n            : of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => (event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = _getEventTarget(event);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return (this._overlayAttached &&\n                clickTarget !== this._element.nativeElement &&\n                // Normally focus moves inside `mousedown` so this condition will almost always be\n                // true. Its main purpose is to handle the case where the input is focused from an\n                // outside click which propagates up to the `body` listener within the same sequence\n                // and causes the panel to close immediately (see #3106).\n                this._document.activeElement !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                !!this._overlayRef &&\n                !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._assignOptionValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const hasModifier = hasModifierKey(event);\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifier) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (keyCode === TAB || (isArrowKey && !hasModifier && this.panelOpen)) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n                if (this.autocomplete.autoSelectActiveOption && this.activeOption) {\n                    if (!this._pendingAutoselectedOption) {\n                        this._valueBeforeAutoSelection = this._element.nativeElement.value;\n                    }\n                    this._pendingAutoselectedOption = this.activeOption;\n                    this._assignOptionValue(this.activeOption.value);\n                }\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._pendingAutoselectedOption = null;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    _handleClick() {\n        if (this._canOpen() && !this.panelOpen) {\n            this.openPanel();\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            if (this._formField) {\n                this._formField.floatLabel = 'auto';\n            }\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return (merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            // The `NgZone.onStable` always emits outside of the Angular zone, thus we have to re-enter\n            // the Angular zone. This will lead to change detection being called outside of the Angular\n            // zone and the `autocomplete.opened` will also emit outside of the Angular.\n            this._zone.run(() => {\n                const wasOpen = this.panelOpen;\n                this._resetActiveItem();\n                this.autocomplete._setVisibility();\n                this._changeDetectorRef.detectChanges();\n                if (this.panelOpen) {\n                    this._overlayRef.updatePosition();\n                }\n                if (wasOpen !== this.panelOpen) {\n                    // If the `panelOpen` state changed, we need to make sure to emit the `opened` or\n                    // `closed` event, because we may not have emitted it. This can happen\n                    // - if the users opens the panel and there are no options, but the\n                    //   options come in slightly later or as a result of the value changing,\n                    // - if the panel is closed after the user entered a string that did not match any\n                    //   of the available options,\n                    // - if a valid string is entered after an invalid one.\n                    if (this.panelOpen) {\n                        this.autocomplete.opened.emit();\n                    }\n                    else {\n                        this.autocomplete.closed.emit();\n                    }\n                }\n            });\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event)));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _assignOptionValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith\n            ? this.autocomplete.displayWith(value)\n            : value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        this._updateNativeInputValue(toDisplay != null ? toDisplay : '');\n    }\n    _updateNativeInputValue(value) {\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = value;\n        }\n        else {\n            this._element.nativeElement.value = value;\n        }\n        this._previousValue = value;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        const toSelect = event ? event.source : this._pendingAutoselectedOption;\n        if (toSelect) {\n            this._clearPreviousSelectedOption(toSelect);\n            this._assignOptionValue(toSelect.value);\n            this._onChange(toSelect.value);\n            this.autocomplete._emitSelectEvent(toSelect);\n            this._element.nativeElement.focus();\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n                id: this._formField?.getLabelId(),\n            });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            this._handleOverlayEvents(overlayRef);\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        this.autocomplete._setColor(this._formField?.color);\n        this._applyModalPanelOwnership();\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir ?? undefined,\n            panelClass: this._defaults?.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass },\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Reset the active item to -1. This is so that pressing arrow keys will activate the correct\n     * option.\n     *\n     * If the consumer opted-in to automatically activatating the first option, activate the first\n     * *enabled* option.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n            // because it activates the first option that passes the skip predicate, rather than the\n            // first *enabled* option.\n            let firstEnabledOptionIndex = -1;\n            for (let index = 0; index < autocomplete.options.length; index++) {\n                const option = autocomplete.options.get(index);\n                if (!option.disabled) {\n                    firstEnabledOptionIndex = index;\n                    break;\n                }\n            }\n            autocomplete._keyManager.setActiveItem(firstEnabledOptionIndex);\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document?.defaultView || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n    /** Handles keyboard events coming from the overlay panel. */\n    _handleOverlayEvents(overlayRef) {\n        // Use the `keydownEvents` in order to take advantage of\n        // the overlay event targeting provided by the CDK overlay.\n        overlayRef.keydownEvents().subscribe(event => {\n            // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n            // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n            if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                // If the user had typed something in before we autoselected an option, and they decided\n                // to cancel the selection, restore the input value to the one they had typed in.\n                if (this._pendingAutoselectedOption) {\n                    this._updateNativeInputValue(this._valueBeforeAutoSelection ?? '');\n                    this._pendingAutoselectedOption = null;\n                }\n                this._closeKeyEventStream.next();\n                this._resetActiveItem();\n                // We need to stop propagation, otherwise the event will eventually\n                // reach the input itself and cause the overlay to be reopened.\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        });\n        // Subscribe to the pointer events stream so that it doesn't get picked up by other overlays.\n        // TODO(crisbeto): we should switch `_getOutsideClickStream` eventually to use this stream,\n        // but the behvior isn't exactly the same and it ends up breaking some internal tests.\n        overlayRef.outsidePointerEvents().subscribe();\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._element.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = this.autocomplete.id;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the references to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n            this._trackedModal = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteTriggerBase, deps: [{ token: i0.ElementRef }, { token: i1$1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: MAT_AUTOCOMPLETE_SCROLL_STRATEGY }, { token: i2$1.Directionality, optional: true }, { token: MAT_FORM_FIELD, host: true, optional: true }, { token: DOCUMENT, optional: true }, { token: i3.ViewportRuler }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatAutocompleteTriggerBase, inputs: { autocomplete: [\"matAutocomplete\", \"autocomplete\"], position: [\"matAutocompletePosition\", \"position\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"] }, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteTriggerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1$1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n                }] }, { type: i2$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }, {\n                    type: Host\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { autocomplete: [{\n                type: Input,\n                args: ['matAutocomplete']\n            }], position: [{\n                type: Input,\n                args: ['matAutocompletePosition']\n            }], connectedTo: [{\n                type: Input,\n                args: ['matAutocompleteConnectedTo']\n            }], autocompleteAttribute: [{\n                type: Input,\n                args: ['autocomplete']\n            }], autocompleteDisabled: [{\n                type: Input,\n                args: ['matAutocompleteDisabled']\n            }] } });\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-mdc-autocomplete-panel-above';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteTrigger, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatAutocompleteTrigger, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", host: { listeners: { \"focusin\": \"_handleFocus()\", \"blur\": \"_onTouched()\", \"input\": \"_handleInput($event)\", \"keydown\": \"_handleKeydown($event)\", \"click\": \"_handleClick()\" }, properties: { \"attr.autocomplete\": \"autocompleteAttribute\", \"attr.role\": \"autocompleteDisabled ? null : \\\"combobox\\\"\", \"attr.aria-autocomplete\": \"autocompleteDisabled ? null : \\\"list\\\"\", \"attr.aria-activedescendant\": \"(panelOpen && activeOption) ? activeOption.id : null\", \"attr.aria-expanded\": \"autocompleteDisabled ? null : panelOpen.toString()\", \"attr.aria-controls\": \"(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id\", \"attr.aria-haspopup\": \"autocompleteDisabled ? null : \\\"listbox\\\"\" }, classAttribute: \"mat-mdc-autocomplete-trigger\" }, providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: [\"matAutocompleteTrigger\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                    host: {\n                        'class': 'mat-mdc-autocomplete-trigger',\n                        '[attr.autocomplete]': 'autocompleteAttribute',\n                        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                        '[attr.aria-controls]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                        // a little earlier. This avoids issues where IE delays the focusing of the input.\n                        '(focusin)': '_handleFocus()',\n                        '(blur)': '_onTouched()',\n                        '(input)': '_handleInput($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(click)': '_handleClick()',\n                    },\n                    exportAs: 'matAutocompleteTrigger',\n                    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR],\n                }]\n        }] });\n\nclass MatAutocompleteModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteModule, declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin], imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule], exports: [CdkScrollableModule,\n            MatAutocomplete,\n            MatOptionModule,\n            MatCommonModule,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteModule, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule, CdkScrollableModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatAutocomplete,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}