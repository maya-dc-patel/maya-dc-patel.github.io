{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/material/button\";\n\nfunction CbtJournalComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"On To Distortion Patterns\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CbtJournalComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵlistener(\"click\", function CbtJournalComponent_div_14_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const pattern_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.selectDistortion(pattern_r2.pattern));\n    });\n    i0.ɵɵelementStart(1, \"div\", 11);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 12);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const pattern_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(pattern_r2.pattern);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", pattern_r2.description, i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(pattern_r2.description);\n  }\n}\n\nexport let CbtJournalComponent = /*#__PURE__*/(() => {\n  class CbtJournalComponent {\n    constructor() {\n      this.distortionPatterns = false;\n      this.patterns = [{\n        pattern: 'all or nothing thinking',\n        description: 'All-or-nothing thinking is also known as black-and-white thinking or polarized thinking. This type of thinking involves viewing things in absolute terms: Situations are always black or white, everything or nothing, good or bad, success or failure. ',\n        extra: \"<p>An example of all-or-nothing thinking is dwelling on mistakes and assuming you will never be able to do well, instead of acknowledging the error and trying to move past it.One way to overtime this cognitive distortion is to recognize that success and progress are not all-or-nothing concepts. By addressing this type of thinking and replacing self-defeating thoughts, you can feel better about your progress and recognize your strengths.</p>\"\n      }, {\n        pattern: 'overgeneralization',\n        description: '<p>Overgeneralization happens when you make a rule after a single event or a series of coincidences.<br><br>The words \"always\" or \"never\" frequently appear in the sentence. ',\n        extra: \"<br><br>Because you have experience with one event playing out a certain way, you assume that all future events will have the same outcome.<br><br>For example, imagine that you made a suggestion about a work project that wasn\\'t adopted in the final work. You might overgeneralize this and assume that no one at work ever listens to you or takes you seriously.One way to combat overgeneralization is to focus on using realistic language. <br><br>Instead of saying, 'I always do that!,' say something such as, 'That happens sometimes, but I\\'ll try to do better next time.\"\n      }, {\n        pattern: 'mental filters',\n        description: \"A mental filter is the opposite of overgeneralization, but with the same negative outcome.<br/>Instead of taking one small event and generalizing it inappropriately, the mental filter takes one small event and focuses on it exclusively, filtering out anything else.\",\n        extra: \"A mental filter is the opposite of overgeneralization, but with the same negative outcome.<br/>Instead of taking one small event and generalizing it inappropriately, the mental filter takes one small event and focuses on it exclusively, filtering out anything else.\"\n      }, {\n        pattern: 'discounting the positive',\n        description: '',\n        extra: ''\n      }];\n    }\n\n    selectDistortion(pattern) {\n      console.log(pattern);\n    }\n\n    ngOnInit() {}\n\n  }\n\n  CbtJournalComponent.ɵfac = function CbtJournalComponent_Factory(t) {\n    return new (t || CbtJournalComponent)();\n  };\n\n  CbtJournalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CbtJournalComponent,\n    selectors: [[\"app-cbt-journal\"]],\n    decls: 21,\n    vars: 4,\n    consts: [[1, \"text-3xl\", \"text-center\"], [1, \"m-10\", \"content-center\"], [1, \"w-full\", \"rounded-md\", \"px-4\", \"py-2\", \"border-2\", \"border-gray-100\"], [\"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"What is the thought that you are having\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-raised-button\", \"\", 1, \"mt-4\", 3, \"click\"], [4, \"ngIf\"], [1, \"text-center\", \"mt-10\", \"m-4\", \"text-5xl\", \"text-blue-700\", \"drop-shadow-md\", \"font-bold\"], [1, \"mx-10\", \"flex\", \"gap-8\"], [\"class\", \"cursor-pointer hover:bg-red-400 basis-1/5 flex-col bg-red-300 text-white p-2 rounded-md drop-shadow-lg\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"text-center\", \"mt-10\", \"m-4\", \"text-3xl\", \"text-blue-700\", \"drop-shadow-md\", \"font-bold\"], [1, \"cursor-pointer\", \"hover:bg-red-400\", \"basis-1/5\", \"flex-col\", \"bg-red-300\", \"text-white\", \"p-2\", \"rounded-md\", \"drop-shadow-lg\", 3, \"click\"], [1, \"text-black\", \"text-xl\", \"text-center\", \"p-4\", \"font-bold\"], [1, \"p-2\", \"text-sm\", 3, \"innerHTML\"]],\n    template: function CbtJournalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtext(1, \"Cognitive Behavioral Therapy Journal\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1)(3, \"mat-form-field\", 2)(4, \"mat-label\");\n        i0.ɵɵtext(5, \"Thought\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function CbtJournalComponent_Template_input_ngModelChange_6_listener($event) {\n          return ctx.thought = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function CbtJournalComponent_Template_button_click_7_listener() {\n          return ctx.distortionPatterns = true;\n        });\n        i0.ɵɵtext(8, \" Next\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"div\");\n        i0.ɵɵtemplate(10, CbtJournalComponent_div_10_Template, 2, 0, \"div\", 5);\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵtext(12, \" 10 cognitive errors\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 7);\n        i0.ɵɵtemplate(14, CbtJournalComponent_div_14_Template, 5, 3, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 9);\n        i0.ɵɵtext(16, \"Based on the strategies above, how can you reframe this thought?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"mat-form-field\", 2)(18, \"mat-label\");\n        i0.ɵɵtext(19, \"New Thought\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function CbtJournalComponent_Template_input_ngModelChange_20_listener($event) {\n          return ctx.newThought = $event;\n        });\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.thought);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.distortionPatterns);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.patterns);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.newThought);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i3.MatFormField, i3.MatLabel, i4.MatInput, i5.MatButton]\n  });\n  return CbtJournalComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}